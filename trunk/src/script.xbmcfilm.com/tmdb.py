""" The moviedb database """import jsonimport timefrom datetime import datetimeimport urllib2, urllibfrom urllib2 import urlopenmy_api_key = 'e6ad14ba5c9d55b7622f943c2efe1c39'max_results = 1class TmdbDatasource():    URL_SEARCH = (u'http://api.themoviedb.org/3/search/movie'                   '?api_key=%(api_key)s&query=%(query)s')    URL_GET = u'http://api.themoviedb.org/3/movie/%(id)s?api_key=%(api_key)s'    URL_CAST = u'http://api.themoviedb.org/3/movie/%(id)s/casts?api_key=%(api_key)s'    URL_ALT = u'http://api.themoviedb.org/3/movie/%(id)s/alternative_titles?api_key=%(api_key)s'    def _tmdb_search(self, title, myear=''):        url = self.URL_SEARCH % dict(api_key=my_api_key, query=urllib.quote(title.encode('utf8')),year=myear)        print ("URl",url)        req = urllib2.Request(url)        req.add_header('Accept', 'application/json')        r = urllib2.urlopen(req)        jsonResponse = r.read()        r.close()        jsonDecoded = json.JSONDecoder().decode(jsonResponse)        return jsonDecoded    def _get(self, url, *args, **kwargs):        ak = self.config.get('api_key')        url = url % dict(api_key=ak, **kwargs)        for _ in xrange(3):            print('Requesting {url}', url)            response = requests.get(url)            if not 200 <= response.status_code < 400 :                print('Got error ({http_err}), retrying in 3s...', response.status_code)                time.sleep(3)                continue            return json.loads(response.text)        else:            print('Unable to get the URL')    def _tmdb_get(self, movie_id):        return self._get(self.URL_GET, id=movie_id)    def _tmdb_cast(self, movie_id):        return self._get(self.URL_CAST, id=movie_id)    def _tmdb_alt(self, movie_id):        return self._get(self.URL_ALT, id=movie_id)    def search(self, title, year=None):        results = self._tmdb_search(title,year)['results']        print ("Res",results)        return results        '''        max_results = self.config.get('max_results')        for result in results:            # Abort the search if max results is reached:            if max_results == 0:                break            # Parse the release year:            if result.get('release_date'):                movie_year = datetime.strptime(result['release_date'], '%Y-%m-%d').year            else:                movie_year = None            # Skip the movie if searched date is not the release date:            if year is not None and year != movie_year:                continue            # Else, format and yield the movie:            cast = self._tmdb_cast(result['id'])            movie = Movie({'title': result['original_title'],                           'directors': [x['name'] for x in cast['crew'] if x['department'] == 'Directing'],                           '_datasource': self.name,                           '_tmdb_id': result['id']})            if movie_year:                movie['year'] = movie_year            yield movie            if max_results is not None:                max_results -= 1'''    def refresh(self, movie):        """ Try to refresh metadata of the movie through the datasource."""        if '_tmdb_id' in movie:            tmdb_id = movie['_tmdb_id']            details = self._tmdb_get(tmdb_id)            cast = self._tmdb_cast(tmdb_id)            alternatives = self._tmdb_alt(tmdb_id)            refreshed = Movie({'title': details['original_title'],                               'score': details['popularity'],                               'directors': [x['name'] for x in cast['crew'] if x['department'] == 'Directing'],                               'writers': [x['name'] for x in cast['crew'] if x['department'] == 'Writing'],                               'cast': [x['name'] for x in cast['cast']],                               'genres': [x['name'] for x in details['genres']],                               'countries': [x['name'] for x in details['production_countries']],                               'tmdb_votes': int(round(details.get('vote_average', 0) * 0.5)),                               '_Datasource': self.name,                               '_tmdb_id': tmdb_id})            if details.get('release_date'):                refreshed['year'] = datetime.strptime(details['release_date'], '%Y-%m-%d').year            if details.get('belongs_to_collection'):                refreshed['collection'] = details['belongs_to_collection']['name']            for alt in alternatives['titles']:                refreshed['title_%s' % alt['iso_3166_1'].lower()] = alt['title']            return refreshed